<style>
	#nw-product-manual-table {
		padding-top: 30px;
		padding-bottom: 30px;
	}
	.responsive-chart-table {
		width: 100%;
		border-collapse: collapse;
	}
	
	.responsive-chart-table td, 
	.responsive-chart-table th {
		padding: 8px;
		text-align: center;
		border: 1px solid #ccc;
	}
	
    @media (max-width: 768px) {
        #nw-product-manual-table {
            grid-template-columns: repeat(var(--mobile-columns, 2), 1fr) !important;
        }
		.table-container {
			width: 100%;
			overflow-x: auto;
		}
	
		.responsive-chart-table {
			min-width: 600px; /* Ensures table scrolls horizontally if needed */
			white-space: nowrap;
		}
    }
</style>
<div class="page-width" id="nw-product-manual-table">
	
	<div>
		<input type="text" class="button" id="search_text">
		<input value="Search" type="submit" class="button" id="search_submit">
	</div>

	{% assign manuals = shop.metaobjects.product_manual_category.values %}

	{% assign active_manuals = manuals | where: "active", true %}
	{% assign manual_array = "" %}

	{% for manual in active_manuals %}
	{% assign padded_order = manual.order | plus: 1000 | append: "---" | append: manual.name %}
	{% assign manual_array = manual_array | append: padded_order | append: "||" %}
	{% endfor %}

	{% assign sorted_manuals = manual_array | split: "||" | sort %}

	<div id="manual-container">
	{% for item in sorted_manuals %}
		{% assign parts = item | split: "---" %}
		{% assign order = parts[0] | minus: 1000 %}
		{% assign name = parts[1] %}

		<div class="manual-section" data-category="{{ name }}">
		<p style="text-align: left;">
			<span style="font-size: xx-large; font-family: Arial, Helvetica, sans-serif; color: #808080;">
			<strong><span style="font-size: x-large;">{{ name }}</span></strong>
			</span>
		</p> 

		<div class="table-container">
			<table class="responsive-chart-table" align="center" border="1" cellspacing="0" cellpadding="8" width="100%">
			<tbody id="files-{{ name | replace: ' ', '-' | downcase }}">
				<tr>
				<td colspan="4" style="text-align: center;">Loading files...</td>
				</tr>
			</tbody>
			</table>
		</div>
		<br>
		</div>
	{% endfor %}
	</div>


</div>

<script>
	async function fetchProductManuals() {
		let cursor = null;
		let hasNextPage = true;
		let allFiles = [];
	
		while (hasNextPage) {
			const query = `
			query {
			  metaobjects(type: "product_manual", first: 250 ${cursor ? `, after: "${cursor}"` : ""}) {
				pageInfo {
				  hasNextPage
				  endCursor
				}
				edges {
				  node {
					id
					fields {
					  key
					  value
					}
					handle
					type
				  }
				}
			  }
			}`;
	
			const response = await fetch("https://mqtas1-3r.myshopify.com/api/2025-01/graphql.json", {
				method: "POST",
				headers: {
					"Content-Type": "application/json",
					"X-Shopify-Storefront-Access-Token": "641f19fbd076afe2452c76b4565fb015"
				},
				body: JSON.stringify({ query })
			});
	
			const result = await response.json();
	
			if (result.errors) {
				console.error("GraphQL Error:", result.errors);
				return;
			}
	
			const metaobjects = result.data.metaobjects.edges;
	
			allFiles = allFiles.concat(metaobjects.map(({ node }) => {
				let fileData = {};
				node.fields.forEach(field => {
					fileData[field.key] = field.value;
				});
				return fileData;
			}));
	
			hasNextPage = result.data.metaobjects.pageInfo.hasNextPage;
			cursor = result.data.metaobjects.pageInfo.endCursor || null;
		}
	
		return allFiles;
	}
	
	async function displayProductManuals() {
		const allFiles = await fetchProductManuals();
	
		document.querySelectorAll(".manual-section").forEach(section => {
			const categoryName = section.getAttribute("data-category");
			const formattedId = `files-${categoryName.replace(/\s+/g, "-").toLowerCase()}`;
			console.log("Looking for:", formattedId); // Debugging log
		
			const tableBody = document.getElementById(formattedId);
		
			if (!tableBody) {
				console.warn(`No matching <tbody> found for category: ${categoryName} (ID: ${formattedId})`);
				return; // Prevents further errors
			}
		
			tableBody.innerHTML = ""; // Clear previous content
		
			const relatedFiles = allFiles.filter(file => file.category_label === categoryName);
		
			if (relatedFiles.length === 0) {
				tableBody.innerHTML = `<tr><td colspan="4" style="text-align: center;">No files available</td></tr>`;
				return;
			}
		
			let counter = 0;
			let row = document.createElement("tr");
		
			relatedFiles.forEach(file => {
				let cell = document.createElement("td");
				cell.innerHTML = `<a href="${file.file_attachment}" target="_blank">${file.download_label}</a>`;
				row.appendChild(cell);
				counter++;
		
				if (counter === 4) {
					tableBody.appendChild(row);
					row = document.createElement("tr");
					counter = 0;
				}
			});
		
			if (counter > 0) {
				while (counter < 4) {
					let emptyCell = document.createElement("td");
					row.appendChild(emptyCell);
					counter++;
				}
				tableBody.appendChild(row);
			}
		});
		
	}
	
	document.addEventListener("DOMContentLoaded", displayProductManuals);	
	
</script>

{% schema %}
	{
		"name": "NW Product Manual Table",
		"tag": "section",
		"class": "nw-product-manual-table",
		"blocks": [],
		"presets": [
			{
				"name": "NW Product Manual Table"
			}
		]
	}
{% endschema %}